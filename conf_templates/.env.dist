#API服务端口
API_PORT=5001

#API服务地址（用于内部API调用，如重新评审等功能）
API_URL=http://localhost:5001

#UI服务地址（用于推送消息中的详情链接，支持HTTP/HTTPS、域名/IP、自定义端口）
UI_URL=http://localhost:5001

#UI界面端口
UI_PORT=5002

#推送消息模式（detailed=详细推送，simplified=简化推送）
NOTIFICATION_MODE=detailed

#Timezone
TZ=Asia/Shanghai

#大模型供应商配置,支持 deepseek, openai,zhipuai,qwen 和 ollama
LLM_PROVIDER=deepseek

#DeepSeek settings
DEEPSEEK_API_KEY=
DEEPSEEK_API_BASE_URL=https://api.deepseek.com
DEEPSEEK_API_MODEL=deepseek-chat

#OpenAI settings
OPENAI_API_KEY=xxxx
OPENAI_API_BASE_URL=https://api.openai.com/v1
OPENAI_API_MODEL=gpt-4o-mini

#ZhipuAI settings
ZHIPUAI_API_KEY=xxxx
ZHIPUAI_API_MODEL=GLM-4-Flash

#Qwen settings
QWEN_API_KEY=sk-xxx
QWEN_API_BASE_URL=https://dashscope.aliyuncs.com/compatible-mode/v1
QWEN_API_MODEL=qwen-coder-plus

#OllaMA settings; 注意: 如果使用 Docker 部署，127.0.0.1 指向的是容器内部的地址。请将其替换为实际的 Ollama服务器IP地址。
#OLLAMA_API_BASE_URL=http://127.0.0.1:11434
OLLAMA_API_BASE_URL=http://host.docker.internal:11434
OLLAMA_API_MODEL=deepseek-r1:latest

#支持review的文件类型
SUPPORTED_EXTENSIONS=.c,.cc,.cpp,.cs,.css,.go,.h,.java,.js,.jsx,.lua,.md,.php,.py,.ts,.tsx,.vue,.yml
#每次 Review 的最大 Token 限制（超出部分自动截断）
REVIEW_MAX_TOKENS=10000
#Review 风格选项：professional（专业） | sarcastic（毒舌） | gentle（温和） | humorous（幽默）
REVIEW_STYLE=professional

# ============================================
# 版本追踪配置 (Version Tracking Settings)
# ============================================
#是否启用版本追踪功能（避免重复审查相同代码版本）
VERSION_TRACKING_ENABLED=1

#是否复用之前的审查结果
REUSE_PREVIOUS_REVIEW_RESULT=1

#版本记录保留天数（超过此天数的记录将被清理）
VERSION_TRACKING_RETENTION_DAYS=30

#钉钉配置
DINGTALK_ENABLED=0
DINGTALK_WEBHOOK_URL=https://oapi.dingtalk.com/robot/send?access_token=xxx

#企业微信配置
WECOM_ENABLED=0
WECOM_WEBHOOK_URL=https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=xxx

#飞书配置
FEISHU_ENABLED=0
FEISHU_WEBHOOK_URL=https://open.feishu.cn/open-apis/bot/v2/hook/xxx

#自定义webhook配置，使用场景：通过飞书发送应用消息可以实现Push评审通知到提交人，在自定义webhook里可以实现各种定制通知功能
#参数EXTRA_WEBHOOK_URL接收POST请求，data={ai_codereview_data: {}, webhook_data: {}}，ai_codereview_data为本系统通知的数据，webhook_data为原github、gitlab hook触发的数据
EXTRA_WEBHOOK_ENABLED=0
EXTRA_WEBHOOK_URL=https://xxx/xxx

#日志配置
LOG_FILE=log/app.log
LOG_MAX_BYTES=10485760
LOG_BACKUP_COUNT=3
LOG_LEVEL=DEBUG

#工作日报发送时间
REPORT_CRONTAB_EXPRESSION=0 18 * * 1-5

#Gitlab配置
GITLAB_URL=
GITLAB_ACCESS_TOKEN=
GITLAB_ENABLED=0

#Github配置(如果使用 Github 作为代码托管平台，需要配置此项)
GITHUB_ACCESS_TOKEN=
GITHUB_URL=https://github.com
GITHUB_ENABLED=0

# 开启Push Review功能(如果不需要push事件触发Code Review，设置为0)
PUSH_REVIEW_ENABLED=1
# 开启Merge请求过滤，过滤仅当合并目标分支是受保护分支时才Review(开启此选项请确保仓库已配置受保护分支protected branches)
MERGE_REVIEW_ONLY_PROTECTED_BRANCHES_ENABLED=0

# Dashboard登录用户名和密码
DASHBOARD_USER=admin
DASHBOARD_PASSWORD=admin

# queue (async, rq)
QUEUE_DRIVER=async
REDIS_HOST=127.0.0.1
REDIS_PORT=6379

# gitlab domain slugged
WORKER_QUEUE=git_test_com

# ===================== SVN 配置（支持多仓库和单仓库模式） =====================

# 是否启用SVN代码审查功能 (1=启用, 0=关闭)
SVN_CHECK_ENABLED=0

# -----------------------------------------------------------------------------
# 推荐：多仓库配置（JSON数组，支持多个SVN仓库，字段详见下方示例）
# 示例：
# SVN_REPOSITORIES=[
#   {
#     "name": "project1", 
#     "remote_url": "svn://...", 
#     "local_path": "data/svn/project1", 
#     "username": "user1", 
#     "password": "pass1", 
#     "check_hours": 1, 
#     "enable_merge_review": true,
#     "check_crontab": "*/30 * * * *",
#     "check_limit": 100
#   },
#   {
#     "name": "project2", 
#     "remote_url": "svn://...", 
#     "local_path": "data/svn/project2", 
#     "username": "user2", 
#     "password": "pass2", 
#     "check_hours": 2, 
#     "enable_merge_review": false,
#     "check_crontab": "0 */2 * * *",
#     "check_limit": 50
#   }
# ]
SVN_REPOSITORIES=[{"name":"example_project","remote_url":"https://example.com/svn/repo/trunk","local_path":"data/svn/project","username":"","password":"","check_hours":1,"enable_merge_review":true,"check_crontab":"*/30 * * * *","check_limit":100}]

# -----------------------------------------------------------------------------
# 全局设置
# 定时检查Cron表达式（默认每30分钟）
SVN_CHECK_CRONTAB=*/30 * * * *
# 每次检查的最大提交数量
SVN_CHECK_LIMIT=100
# 是否启用AI代码审查 (1=启用, 0=关闭)
SVN_REVIEW_ENABLED=1

# ===================== Merge提交检测配置 =====================
# 是否启用增强的merge提交检测（多维度分析）
USE_ENHANCED_MERGE_DETECTION=0
# merge检测置信度阈值（0.0-1.0，越高越严格）
MERGE_DETECTION_THRESHOLD=0.45

# -----------------------------------------------------------------------------
# 可选：单仓库配置（向后兼容，推荐使用上面的多仓库配置）
SVN_REMOTE_URL=
SVN_LOCAL_PATH=
SVN_USERNAME=
SVN_PASSWORD=

# ===================== 其他配置保持原样 =====================
